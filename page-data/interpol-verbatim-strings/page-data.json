{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/interpol-verbatim-strings/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Interpolated and Verbatim strings in C#\",\n  \"tags\": [\"C#\"],\n  \"emoji\": \"ðŸŸ£\",\n  \"link\": \"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.unescape?view=netcore-3.1\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"the--special-character-identifies-a-string-literal-as-an-interpolated-string\"\n  }, \"The $ special character identifies a string literal as an interpolated string.\"), mdx(\"p\", null, \"From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated\"\n  }), \"docs.microsoft.com/en-u...ated\"), \"  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"Console.WriteLine($\\\"Hello, {name}! Today is {date.DayOfWeek}, it's {date:HH:mm} now.\\\");\\n\")), mdx(\"h2\", {\n    \"id\": \"the--special-character-serves-as-a-verbatim-identifier\"\n  }, \"The @ special character serves as a verbatim identifier.\"), mdx(\"p\", null, \"From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/verbatim\"\n  }), \"docs.microsoft.com/en-u...atim\"), \" \"), mdx(\"h2\", {\n    \"id\": \"to-enable-c-keywords-to-be-used-as-identifiers\"\n  }, \"To enable C# keywords to be used as identifiers.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"string[] @for = { \\\"John\\\", \\\"James\\\", \\\"Joan\\\", \\\"Jamie\\\" };\\nfor (int ctr = 0; ctr < @for.Length; ctr++)\\n{\\n Console.WriteLine($\\\"Here is your gift, {@for[ctr]}!\\\");\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"to-indicate-that-a-string-literal-is-to-be-interpreted-verbatim\"\n  }, \"To indicate that a string literal is to be interpreted verbatim\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \" string filename1 = @\\\"c:\\\\documents\\\\files\\\\u0066.txt\\\";\\n string filename2 = \\\"c:\\\\\\\\documents\\\\\\\\files\\\\\\\\u0066.txt\\\";\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Interpolated and Verbatim strings in C#","tags":["C#"],"emoji":"ðŸŸ£","link":"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.unescape?view=netcore-3.1"},"fields":{"dateModified":"27th Jul 2020","slug":"/interpol-verbatim-strings/"},"tableOfContents":{"items":[{"url":"#the--special-character-identifies-a-string-literal-as-an-interpolated-string","title":"The $ special character identifies a string literal as an interpolated string."},{"url":"#the--special-character-serves-as-a-verbatim-identifier","title":"The @ special character serves as a verbatim identifier."},{"url":"#to-enable-c-keywords-to-be-used-as-identifiers","title":"To enable C# keywords to be used as identifiers.","items":[{"url":"#to-indicate-that-a-string-literal-is-to-be-interpreted-verbatim","title":"To indicate that a string literal is to be interpreted verbatim"}]}]},"parent":{"__typename":"File","relativePath":"interpol-verbatim-strings.md"}}},"pageContext":{"id":"4358475a-743f-5f8c-834d-511725f26920","previous":{"id":"37d3e681-f6b8-523b-b545-c413dbe3ac6b","frontmatter":{"title":"Vanila Javascript and Lodash Array/Object Useful Methods","tags":["JavaScript","lodash"]},"fields":{"slug":"/javascript-utils/"}},"next":{"id":"031e2322-2390-595f-ade7-c42dfad828ab","frontmatter":{"title":"Code Cheatsheets","tags":["cheatsheets"]},"fields":{"slug":"/cheatsheets/"}},"hasUntagged":false,"basePath":"/"}}}