{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/newtonsoft-json/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NewtonSoft JSON (Json.NET) Usage\",\n  \"tags\": [\"C#\", \"JSON\"],\n  \"emoji\": \"ðŸš€\",\n  \"link\": \"https://www.newtonsoft.com/json/help/html/Introduction.htm\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"rename-json-properties\"\n  }, \"Rename JSON properties\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"public class Videogame\\n{\\n    [JsonProperty(\\\"name\\\")]\\n    public string Name { get; set; }\\n\\n    [JsonProperty(\\\"release_date\\\")]\\n    public DateTime ReleaseDate { get; set; }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"Videogame starcraft = new Videogame\\n{\\n    Name = \\\"Starcraft\\\",\\n    ReleaseDate = new DateTime(1998, 1, 1)\\n};\\nstring json = JsonConvert.SerializeObject(starcraft, Formatting.Indented);\\n\")), mdx(\"p\", null, \"From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.newtonsoft.com/json/help/html/JsonPropertyName.htm\"\n  }), \"newtonsoft.com/json/h...me.htm\")), mdx(\"h2\", {\n    \"id\": \"serialize-json-to-a-file\"\n  }, \"Serialize JSON to a file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"Movie movie = new Movie\\n{\\n    Name = \\\"Bad Boys\\\",\\n    Year = 1995\\n};\\n// serialize JSON to a string and then write string to a file\\nFile.WriteAllText(@\\\"c:\\\\movie.json\\\", JsonConvert.SerializeObject(movie));\\n// serialize JSON directly to a file\\nusing (StreamWriter file = File.CreateText(@\\\"c:\\\\movie.json\\\"))\\n{\\n    JsonSerializer serializer = new JsonSerializer();\\n    serializer.Serialize(file, movie);\\n}\\n\")), mdx(\"p\", null, \"From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.newtonsoft.com/json/help/html/SerializeWithJsonSerializerToFile.htm\"\n  }), \"newtonsoft.com/json/h...le.htm\")), mdx(\"h2\", {\n    \"id\": \"ignore-null-values\"\n  }, \"Ignore null values\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"string jsonIgnoreNullValues = JsonConvert.SerializeObject(person, Formatting.Indented, new JsonSerializerSettings\\n{\\n    NullValueHandling = NullValueHandling.Ignore\\n});\\n\")), mdx(\"p\", null, \"From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.newtonsoft.com/json/help/html/NullValueHandlingIgnore.htm\"\n  }), \"newtonsoft.com/json/h...re.htm\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"NewtonSoft JSON (Json.NET) Usage","tags":["C#","JSON"],"emoji":"ðŸš€","link":"https://www.newtonsoft.com/json/help/html/Introduction.htm"},"fields":{"dateModified":"27th Jul 2020","slug":"/newtonsoft-json/"},"tableOfContents":{"items":[{"url":"#rename-json-properties","title":"Rename JSON properties","items":[{"url":"#usage","title":"Usage"}]},{"url":"#serialize-json-to-a-file","title":"Serialize JSON to a file"},{"url":"#ignore-null-values","title":"Ignore null values"}]},"parent":{"__typename":"File","relativePath":"newtonsoft-json.md"}}},"pageContext":{"id":"6baaa152-ae6b-5169-8482-06fd8227a55c","previous":{"id":"c7403a7c-5bac-553b-9b01-976067ca1e2b","frontmatter":{"title":"React Hooks","tags":["Reactjs","React-hooks"]},"fields":{"slug":"/react-hooks/"}},"next":{"id":"cf3c035a-7710-5266-ad48-824c9a3a42bd","frontmatter":{"title":"JavaScript Truthy and Falsy","tags":["JavaScript"]},"fields":{"slug":"/js-truthy-falsy/"}},"hasUntagged":false,"basePath":"/"}}}