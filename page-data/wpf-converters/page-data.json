{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/wpf-converters/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"WPF Value Converters for UI use\",\n  \"tags\": [\"WPF\", \"XAML\", \"C#\"],\n  \"emoji\": \"ðŸ”Œ\",\n  \"link\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"using-value-converters\"\n  }, \"Using Value Converters\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"    <Window.Resources>\\n        <BooleanToVisibilityConverter x:Key=\\\"BooleanToVisibilityConverter\\\"/>\\n        <!-- Custom Converters -->\\n        <viewModel:NullToVisibilityConverter x:Key=\\\"NullToVisibilityConverter\\\"/>\\n        <viewModel:EnumToBoolConveter x:Key=\\\"EnumToBoolConveter\\\"/>\\n        <viewModel:StateToColourConverter x:Key=\\\"StateToColourConverter\\\" />\\n    </Window.Resources>\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-converters\"\n  }, \"Custom Converters\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inherit from IValueConverter and implement convert methods\")), mdx(\"h2\", {\n    \"id\": \"samples\"\n  }, \"Samples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NullToVisibility\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"    public sealed class NullToVisibilityConverter : IValueConverter\\n    {\\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\\n        {\\n            return value == null ? Visibility.Collapsed : Visibility.Visible;\\n        }\\n\\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\\n        {\\n            throw new NotImplementedException();\\n        }\\n    }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"EnumToBoolean (\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codecisions.com/wpf-binding-boolean-to-an-enum-value/\"\n  }), \"Source\"), \")\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"    public sealed class EnumToBoolConveter : IValueConverter\\n    {\\n        public object Convert(object value, Type targetType, object boolValue, CultureInfo culture)\\n        {\\n            if (value != null && value.GetType().IsEnum)\\n                return (Enum.Equals(value, boolValue));\\n            else\\n                return DependencyProperty.UnsetValue;\\n        }\\n\\n        public object ConvertBack(object value, Type targetType, object boolValue, CultureInfo culture)\\n        {\\n            if (value is bool && (bool)value)\\n                return boolValue;\\n            else\\n                return DependencyProperty.UnsetValue;\\n        }\\n    }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enum to Color (\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://code.4noobz.net/c-enum-color-converter-ivalueconverter/\"\n  }), \"Source\"), \")\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"   public sealed class StateToColourConverter : IValueConverter\\n    {\\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\\n        {\\n            if(value is DeviceState && value != null)\\n            {\\n                DeviceState state = (DeviceState)value;\\n                var color = new SolidColorBrush(Colors.White);\\n\\n                switch (state)\\n                {\\n                    case DeviceState.OFF:\\n                        colour = new SolidColorBrush(Colors.Red);\\n                        break;\\n                    case DeviceState.ON:\\n                        colour = new SolidColorBrush(Colors.Teal);\\n                        break;\\n                    default:\\n                        colour = new SolidColorBrush(Colors.White);\\n                        break;\\n                }\\n                return color;\\n            }\\n            return Binding.DoNothing;\\n        }\\n\\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\\n        {\\n            throw new NotSupportedException();\\n        }\\n    }\\n\")), mdx(\"p\", null, \"XAML:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"    <Window.Resources>\\n...\\n        <viewModel:StateToColourConverter x:Key=\\\"StateToColourConverter\\\" />\\n    </Window.Resources>\\n...\\n\\n                        <DataTemplate>\\n                            <StackPanel Orientation=\\\"Horizontal\\\">\\n                               ...\\n                                <TextBlock Text=\\\" [\\\" />\\n                                <TextBlock Text=\\\"{Binding CurrentState, UpdateSourceTrigger=PropertyChanged}\\\"\\n                                           Foreground=\\\"{Binding CurrentState,\\n                                                        Converter={StaticResource StateToColourConverter}}\\\"/>\\n                                <TextBlock Text=\\\"]\\\" />\\n                            </StackPanel>\\n                        </DataTemplate>\\n...\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"WPF Value Converters for UI use","tags":["WPF","XAML","C#"],"emoji":"ðŸ”Œ","link":null},"fields":{"dateModified":"27th Jul 2020","slug":"/wpf-converters/"},"tableOfContents":{"items":[{"url":"#using-value-converters","title":"Using Value Converters","items":[{"url":"#custom-converters","title":"Custom Converters"},{"url":"#samples","title":"Samples"}]}]},"parent":{"__typename":"File","relativePath":"wpf-converters.md"}}},"pageContext":{"id":"3d80cbfd-ca47-5c8b-8f10-f09c3f317db5","previous":{"id":"6535955b-7e58-5b10-b4da-44a3f47049f9","frontmatter":{"title":"WPF - Update ObservableCollection from another Thread","tags":["WPF","C#","Threads"]},"fields":{"slug":"/wpf-multithreaded/"}},"next":{"id":"a02e921b-0b45-56d9-bdee-ad3b877473ce","frontmatter":{"title":"WPF combobox bindings track change on item inside Observable Collection","tags":["WPF","MVVM","C#"]},"fields":{"slug":"/wpf-combobox/"}},"hasUntagged":false,"basePath":"/"}}}