{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/wpf-multithreaded/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"WPF - Update ObservableCollection from another Thread\",\n  \"tags\": [\"WPF\", \"C#\", \"Threads\"],\n  \"emoji\": \"ðŸ§µ\",\n  \"link\": \"https://pragmaticdevs.wordpress.com/2015/08/25/modifying-observablecollection-from-worker-threads-in-wpf/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"modify-observable-collection-on-multithreaded-wpf-apps\"\n  }, \"Modify Observable Collection on multithreaded WPF Apps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you try to update the collection from outside the UI thread you get the following error:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System.NotSupportedException : This type of CollectionView does not support changes to its SourceCollection from a thread different from the Dispatcher thread.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For WPF 4.5 we only need to:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create the ObservableCollection in the main thread (Usually ViewModel)\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"  DeviceList = new ObservableCollection<KasaaDevice>();\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use BindingOperations.EnableCollectionSynchronization\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"  BindingOperations.EnableCollectionSynchronization(DeviceList, _lock);\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't forget to add the lock object to class\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"  private static object _lock = new object();\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"WPF - Update ObservableCollection from another Thread","tags":["WPF","C#","Threads"],"emoji":"ðŸ§µ","link":"https://pragmaticdevs.wordpress.com/2015/08/25/modifying-observablecollection-from-worker-threads-in-wpf/"},"fields":{"dateModified":"27th Jul 2020","slug":"/wpf-multithreaded/"},"tableOfContents":{"items":[{"url":"#modify-observable-collection-on-multithreaded-wpf-apps","title":"Modify Observable Collection on multithreaded WPF Apps"}]},"parent":{"__typename":"File","relativePath":"wpf-multithreaded.md"}}},"pageContext":{"id":"6535955b-7e58-5b10-b4da-44a3f47049f9","previous":null,"next":{"id":"3d80cbfd-ca47-5c8b-8f10-f09c3f317db5","frontmatter":{"title":"WPF Value Converters for UI use","tags":["WPF","XAML","C#"]},"fields":{"slug":"/wpf-converters/"}},"hasUntagged":false,"basePath":"/"}}}