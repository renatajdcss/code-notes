{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/wpf-combobox/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"WPF combobox bindings track change on item inside Observable Collection\",\n  \"tags\": [\"WPF\", \"MVVM\", \"C#\"],\n  \"emoji\": \"ðŸ’¡\",\n  \"link\": \"https://social.msdn.microsoft.com/Forums/vstudio/en-US/610d172d-32d5-4ba4-ba1a-c2b8fea5856f/how-to-refresh-combobox?forum=wpf\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"combobox-items-notes\"\n  }, \"Combobox Items Notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To enable property change notification, each item inside the ObservableCollection should implement INotifyPropertyChanged interface.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use DataTemplate instead of toString to show each item so we can have a binding for them\")), mdx(\"h3\", {\n    \"id\": \"sample-xaml\"\n  }, \"Sample XAML\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"                  Width=\\\"300\\\" Height=\\\"30\\\" Margin=\\\"16\\\">\\n                    <ComboBox.ItemTemplate>\\n                        <DataTemplate>\\n                            <StackPanel Orientation=\\\"Horizontal\\\">\\n                                <TextBlock Text=\\\"{Binding Alias, UpdateSourceTrigger=PropertyChanged}\\\" />\\n                                <TextBlock Text=\\\" - \\\"/>\\n                                <TextBlock Text=\\\"{Binding DeviceName, UpdateSourceTrigger=PropertyChanged}\\\" />\\n                                <TextBlock Text=\\\" [\\\" />\\n                                <TextBlock Text=\\\"{Binding CurrentState, UpdateSourceTrigger=PropertyChanged}\\\"\\n                                           Foreground=\\\"{Binding CurrentState,\\n                                                        Converter={StaticResource StateToColourConverter}}\\\"/>\\n                                <TextBlock Text=\\\"]\\\" />\\n                            </StackPanel>\\n                        </DataTemplate>\\n                    </ComboBox.ItemTemplate>\\n\")), mdx(\"h3\", {\n    \"id\": \"sample-property-inside-model\"\n  }, \"Sample property inside model:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C#\"\n  }), \"    public class KasaaDevice : INotifyPropertyChanged\\n    {\\n\\n        public event PropertyChangedEventHandler PropertyChanged;\\n\\n        private void OnPropertyChanged([CallerMemberName] string propertyName = null)\\n        {\\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\\n        }\\n\\n        private DeviceState _currentState;\\n        public DeviceState CurrentState {\\n            get\\n            {\\n                return _currentState;\\n            } set\\n            {\\n                _currentState = value;\\n                OnPropertyChanged(nameof(CurrentState));\\n            }\\n        }\\n\\n        ...\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"WPF combobox bindings track change on item inside Observable Collection","tags":["WPF","MVVM","C#"],"emoji":"ðŸ’¡","link":"https://social.msdn.microsoft.com/Forums/vstudio/en-US/610d172d-32d5-4ba4-ba1a-c2b8fea5856f/how-to-refresh-combobox?forum=wpf"},"fields":{"dateModified":"27th Jul 2020","slug":"/wpf-combobox/"},"tableOfContents":{"items":[{"url":"#combobox-items-notes","title":"Combobox Items Notes","items":[{"url":"#sample-xaml","title":"Sample XAML"},{"url":"#sample-property-inside-model","title":"Sample property inside model:"}]}]},"parent":{"__typename":"File","relativePath":"wpf-combobox.md"}}},"pageContext":{"id":"a02e921b-0b45-56d9-bdee-ad3b877473ce","previous":{"id":"3d80cbfd-ca47-5c8b-8f10-f09c3f317db5","frontmatter":{"title":"WPF Value Converters for UI use","tags":["WPF","XAML","C#"]},"fields":{"slug":"/wpf-converters/"}},"next":{"id":"41f59a8f-9dca-5481-af45-8ed3f5e0dfef","frontmatter":{"title":"Loading Images using webpack and React","tags":["Reactjs","Webpack","JavaScript"]},"fields":{"slug":"/webpack-images/"}},"hasUntagged":false,"basePath":"/"}}}